import React from 'react';
import styles from './styles.scss';

function Home() {
  return (
    <section>
      <p className={styles.paragraph}>
        Welcome to the <strong>Universal React Starter-kyt</strong>. This starter kyt should serve
        as the base for an advanced, server-rendered React app.
      </p>
      <p className={styles.paragraph}>
        Check out the Tools section for an outline of the libraries that are used in this
        Starter-kyt.
      </p>
    </section>
  );
}

export default Home;


  onUpdateInput(inputValue) {
    const self = this;
    this.setState({
      inputValue: inputValue
    }, function() {
      self.performSearch();
    });
  }








import React from 'react';

const Lists = (props) =>{
    
//    const mapval = props.map((props)=>{
//       return <li>{props}</li>
//    });
    console.log('List props: ',props)
    return(
        <ul>
            {props}
        </ul>
    );
}
export default  Lists;

//{props.state.dataSource[0].page}
 // page is : {props.dataSource[0].page}
//working









import React, {Component} from 'react';
import booksApi from '../App/books.js';
import Lists from '../Lists'
import styles from './styles.scss';

class Home extends Component {
  constructor(props) {
    super(props);
    this.state = {
      dataSource : [''],
      inputValue : ''
    }
      this.GoodReads = this.GoodReads.bind(this);
      //this.mapStateToProps = this.mapStateToProps.bind(this);
      this.handleClick = this.handleClick.bind(this);
      
      this.GoodReads();
  }
    
//componentWillMount()
//{
//    
//}
  componentWillReceiveProps(nextProps) {
    if (nextProps.searchResults !== this.props.searchResults) {
      const { query, items, totalResults } = nextProps.searchResults;
      const dataSource = nextProps.books;
      this.setState({ query });
      if (items.length > 0) {
        const bookData = items.filter((i, index) => index < 5).map(book => ({
          name: books[book].title,
          code: book,
          author: books[book].author,
          image: books[book].image,
        }));
        if (items.length > 5) {
          bookData.push({
            name: `${parseInt(totalResults, 10) - 5} Other Results`,
            code: 'search',
            author: query,
            image: '',
          });
        }
        this.setState({ dataSource: bookData });
      }
    }
  }
handleClick()
{
    console.log('handler called')
}

GoodReads() {
    var search = "The Hobbit";
    let result = [];
    booksApi.getAllBooks({query: search, page: '1'}).then((books) => {
        console.log('Result: ',books) //status 400

        result = books;
        this.setState({dataSource: result})
    })
    debugger;
    console.log(result);

}
//componentDidMount()
//    {
//        console.log('datasrc after' , this.state.dataSource);
//    }

render() {
    let ww = [];
    if(this.state.dataSource.length>0){
        if(this.state.dataSource[0].results)
            {
                ww = this.state.dataSource[0].results[0].work;
            }
    }
    console.log('tis is ww ', ww);
    //console.log('try :  ', this.state.dataSource[0].results[0].work[0].best_book[0].title)
    const config = { };
    return (
      <section>
        <input />
        <button className={styles.button} label="Find Book" onClick={this.handleClick} />
        <Lists props= {this.state.dataSource ? this.state.dataSource[0].query : 'No data available'}/>
        <div>   
        </div>
      </section>
    );
  
}
}
export default Home;
  /*<Lists props = {this.state.dataSource}/>
  
  
   query is {this.state.dataSource[0].query}
  
   {this.state.dataSource ? this.state.dataSource[0].query : 'No data available'}
   
   <Lists dp= {this.state.dataSource ? this.state.dataSource[0].query : 'No data available'}/>
   working <Lists dp= {this.state.dataSource[0].page}/>
  */










import React, {Component , PropTypes} from 'react';
import booksApi from '../App/books.js';
import Lists from '../Lists'
import styles from './styles.scss';
import {Link, browserHistory} from 'react-router';
import {connect} from 'react-redux';
import {bindActionCreators} from 'redux';
import * as actions from '../../redux/actions/bookActions'
import AutoComplete from 'material-ui/AutoComplete';

class Home extends Component {
  constructor(props) {
    super(props);
    this.state = {
      dataSource : [],
      inputValue : ''
    }
      this.GoodReads = this.GoodReads.bind(this);
      //this.mapStateToProps = this.mapStateToProps.bind(this);
      this.handleClick = this.handleClick.bind(this);
      
  }
    
componentWillMount()
{
    this.props.actions.loadBooks(this.state.inputValue);
}
  componentWillReceiveProps(nextProps) {
   
  }
handleClick()
{
    console.log('handler called')
      this.GoodReads();
}
GoodReads(searchTerm) {
    var search = searchTerm;
    let result = [];
    booksApi.getAllBooks({query: search, page: '1'}).then((books) => {
        console.log('Result: ',books) //status 400
        
        if(books[0])
            {
                if(books[0]["total-results"][0] > 0){
                    result = books[0].results[0].work
                }
            }
        this.setState({dataSource: result})
    })
    debugger;
    console.log(result);

}
handleClick(event)
{
    console.log('handler called')
    //let term = event.target.value
    this.setState({inputValue: event.target.value});
      this.GoodReads(this.state.inputValue);
}
//componentDidMount()
//    {
//        console.log('datasrc after' , this.state.dataSource);
//    }

render() {
    console.log("Results", this.state.dataSource)
    //console.log('try :  ', this.state.dataSource[0].results[0].work[0].best_book[0].title)
    const config = { };
    return (
      <section>
        <input onChange ={this.handleClick} />
        <button className={styles.button} label="Find Book" onClick={this.handleClick} />
        <Lists dp= {this.state.dataSource}/>
        <div>   
        </div>
      </section>
    );
  
}
//render() {
//    console.log("Results", this.state.dataSource)
//    //console.log('try :  ', this.state.dataSource[0].results[0].work[0].best_book[0].title)
//    const config = { };
//    return (
//      <section>
//        <AutoComplete
//            hintText="Search Book"
//            filter={AutoComplete.noFilter}
//            dataSource={books}
//            dataSourceConfig={config}
//            onUpdateInput={this.handleClick}
//            openOnFocus={true}
//            floatingLabelText="Search Book"
//            onNewRequest={this.handleNewRequest}
//            fullWidth
//          />
//        <input onChange ={this.handleClick} />
//        <button className={styles.button} label="Find Book" onClick={this.handleClick} />
//        <Lists dp= {this.state.dataSource}/>
//        <div>   
//        </div>
//      </section>
//    );
//  
//}
}
Home.propTypes = {
  books: PropTypes.array.isRequired
};

function mapStateToProps(state, ownProps) {
	
    return {
      books: state.books
    };
 
  
}

function mapDispatchToProps(dispatch) {
  return {actions: bindActionCreators(actions, dispatch)}
}


export default connect(mapStateToProps, mapDispatchToProps)(Home);
  /*<Lists props = {this.state.dataSource}/>
  
  
   query is {this.state.dataSource[0].query}
  
   {this.state.dataSource ? this.state.dataSource[0].query : 'No data available'}
   
   <Lists dp= {this.state.dataSource ? this.state.dataSource[0].query : 'No data available'}/>
   working <Lists dp= {this.state.dataSource[0].page}/>
  */